function plot_amp_phase_sdf_with_theory( ...
    irr_params, ...
    scint_field, ...
    detrended_phase_realization, ...
    norm_phase_sdf, ...
    doppler_frequency, ...
    mu, ...
    rhof_veff_ratio)
% plot_amp_phase_sdf_with_theory
%
% Syntax:
%   plot_amp_phase_sdf_with_theory(irr_params, scint_field, ...
%                                  detrended_phase_realization, ...
%                                  norm_phase_sdf, ...
%                                  doppler_frequency, mu, ...
%                                  rhof_veff_ratio)
%
% Description:
%   Produces two subplots comparing:
%     1) The post-propagation intensity SDF (from |scint_field|^2) versus the
%        theoretical intensity spectrum computed via Ispectrum.exe [1].
%     2) The phase SDF for:
%        - The pre-propagation phase (detrended_phase_realization)
%        - The post-propagation phase (phase(scint_field))
%        - The theoretical phase SDF (norm_phase_sdf)
%
%   We take the positive-frequency portion of the FFT (indices from nfft/2+2
%   to nfft, omitting the 0 Hz component at nfft/2+1). The power is converted
%   to dB. We also divide the phase SDF by rhof_veff_ratio, following the
%   same approach used in the original reference code. The theoretical phase
%   SDF is likewise sliced directly (freq_idx_1sided) without additional shifts.
%
% Inputs:
%   irr_params                - Struct with .U, .p1, .p2, .mu0 (spectral parameters)
%   scint_field               - 1D complex array (length nfft) of the propagated field
%   detrended_phase_realization - 1D real array (length nfft) for the screen's phase 
%                                 prior to propagation
%   norm_phase_sdf            - 1D array (length nfft) for the theoretical phase SDF
%   doppler_frequency         - 1D array (length nfft) spanning negative to positive freq
%   mu                        - 1D array (length nfft) of normalized wavenumbers
%   rhof_veff_ratio           - Scalar factor used to scale the phase SDF, matching
%                               the original implementation
%
% Outputs:
%   None (generates a figure with two subplots).
%
% Example:
%   % Minimal usage:
%   irr_params = struct('U', 1.5, 'p1', 2.4, 'p2', 3.7, 'mu0', 0.55);
%   [scint_field, detrended_phase_realization, norm_phase_sdf] = ...
%       my_simulation_function(...); % user-defined
%   doppler_frequency = ...;  % e.g., -Fs/2 : +Fs/2-1
%   mu                = ...;  % typically 2*pi*doppler_frequency*(rhoF/v_eff)
%   rhof_veff         = 0.5;  % example rhof_veff_ratio
%
%   plot_amp_phase_sdf_with_theory(irr_params, ...
%                                  scint_field, ...
%                                  detrended_phase_realization, ...
%                                  norm_phase_sdf, ...
%                                  doppler_frequency, ...
%                                  mu, ...
%                                  rhof_veff);
%
% References:
%   [1] Carrano, C. S., and C. L. Rino (2016). 
%       "A theory of scintillation for two-component power law irregularity spectra:
%       Overview and numerical results," Radio Sci., 51, 789â€“813.
%       doi:10.1002/2015RS005903
%
% Author:
%   Rodrigo de Lima Florindo
%   ORCID: https://orcid.org/0000-0003-0412-5583
%   Email: rdlfresearch@gmail.com

    % Basic checks
    nfft = length(doppler_frequency);
    if any([length(scint_field), ...
            length(detrended_phase_realization), ...
            length(norm_phase_sdf), ...
            length(mu)] ~= nfft)
        error('All input arrays must match doppler_frequency in length.');
    end

    % Indices for positive frequencies (omitting the 0 Hz bin at nfft/2+1).
    freq_idx_1sided = (nfft/2 + 2) : nfft; 
    sdf_idx_1sided  = 2 : (nfft/2);        
    partial_doppler_freq = doppler_frequency(freq_idx_1sided);
    partial_mu           = mu(freq_idx_1sided);

    % Local helper for one-sided SDF from a real-valued signal
    compute_sdf_1sided = @(sig) local_compute_sdf_1sided(sig, nfft, doppler_frequency, sdf_idx_1sided);

    % Post-propagation intensity
    intensity_signal = abs(scint_field).^2;
    intensity_sdf_1sided_post = compute_sdf_1sided(intensity_signal);

    % Theoretical intensity from Ispectrum (interpolated to match partial_mu)
    [Imu, muAxis, S4_val] = Ispectrum(irr_params.U, irr_params.p1, irr_params.p2, irr_params.mu0);
    logImu_interp = interp1(log10(muAxis), log10(Imu), log10(partial_mu), 'pchip', 'extrap');
    Imu_interp    = 10.^logImu_interp;

    % Phase SDF: pre- and post-propagation (divide by rhof_veff_ratio, 
    % per the original reference code's convention).
    preprop_phase_sdf_1sided  = compute_sdf_1sided(detrended_phase_realization) / rhof_veff_ratio;
    postprop_phase_sdf_1sided = compute_sdf_1sided(phase(scint_field)) / rhof_veff_ratio;

    % Theoretical phase SDF: directly slice norm_phase_sdf, skipping 0 Hz.
    phase_sdf_1sided_theory = norm_phase_sdf(freq_idx_1sided);

    % Plot
    figure('Name','Intensity & Phase SDF','Color',[1,1,1]);
    tiledlayout(2,1,"TileSpacing","compact");

    % Subplot 1: Intensity
    nexttile;
    hold on;
    plot(partial_doppler_freq, 10*log10(intensity_sdf_1sided_post), 'b', 'LineWidth',1.2);
    plot(partial_doppler_freq, 10*log10(Imu_interp), 'r--', 'LineWidth',1.2);
    set(gca,'XScale','log');
    xlabel('Frequency (Hz)');
    ylabel('SDF (dB)');
    title(sprintf('Post-Prop Intensity vs. Theoretical (S4=%.3f)', S4_val));
    legend('Post-Prop','Theory','Location','best');
    hold off;

    % Subplot 2: Phase
    nexttile;
    hold on;
    plot(partial_doppler_freq, 10*log10(preprop_phase_sdf_1sided),  'b',  'LineWidth',1.2);
    plot(partial_doppler_freq, 10*log10(postprop_phase_sdf_1sided), 'g',  'LineWidth',1.2);
    plot(partial_doppler_freq, 10*log10(phase_sdf_1sided_theory),   'r--','LineWidth',1.2);
    set(gca,'XScale','log');
    xlabel('Frequency (Hz)');
    ylabel('SDF (dB)');
    title('Phase SDF: Pre-Prop, Post-Prop, and Theory');
    legend('Pre-Prop','Post-Prop','Theory','Location','best');
    grid('on');
    hold off;
    
    sgtitle('Intensity & Phase SDF Comparison');
end

function sdf_1sided = local_compute_sdf_1sided(real_signal, nfft, doppler_freq, sdf_idx_1sided)
    raw_fft = abs(fft(real_signal, nfft)).^2 / nfft;
    partial_sdf = raw_fft(sdf_idx_1sided);
    df = abs(doppler_freq(2) - doppler_freq(1));
    sdf_1sided = partial_sdf / (nfft * df);
end
